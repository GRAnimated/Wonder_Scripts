import ida_idaapi
import idc
import ida_kernwin
import ida_bytes
import csv

global_offset = 0x7100000000

def update_symbol_name(address, new_name):
    address += global_offset
    #new_name = new_name.replace("::", "__").replace("~", "_dtor_").replace("<", "_tl_").replace(">", "_tr_") # bad solution

    current_name = idc.get_name(address, idc.GN_VISIBLE)
    if current_name != new_name:
        if current_name.endswith("_0"): # skip exported funcs, bad solution
            return
        # automatically rename autogenerated names
        if current_name.startswith(("sub_", "off_", "qword_", "dword_", "unk_", "loc_")):
            idc.set_name(address, new_name, idc.SN_NOWARN | idc.SN_NOCHECK)
        else:
            #choice = ida_kernwin.ask_yn(0, f"Do you want to update symbol at {hex(address)} from '{current_name}' to '{new_name}'?")
            #if choice == ida_kernwin.ASKBTN_YES:
            idc.set_name(address, new_name, idc.SN_NOWARN | idc.SN_NOCHECK)

def import_symbols_from_csv(csv_file):
    with open(csv_file, 'r') as file:
        csv_reader = csv.DictReader(file)
        for row in csv_reader:
            address = int(row["Address"], 16)
            name = row["Name"]
            update_symbol_name(address, name)

def csv_to_dict(csv_file):
    data = {}
    with open(csv_file, 'r') as file:
        csv_reader = csv.DictReader(file)
        for row in csv_reader:
            address = int(row["Address"], 16)
            name = row["Name"]
            data[address] = name
    return data

def fix_symbol_name(name):
    n = name.replace("::", "__").replace("~", "_dtor_").replace("<", "_tl_").replace(">", "_tr_") # bad solutions
    return n

def find_changes(current_csv, new_csv):
    csv1 = csv_to_dict(current_csv)
    csv2 = csv_to_dict(new_csv)

    changes = []
    for address, new_name in csv2.items():
        old_name = csv1.get(address)

        new_name = fix_symbol_name(new_name)
        if old_name:
            old_name = fix_symbol_name(old_name)

            if old_name != new_name:
                changes.append((address, old_name, new_name))
        else:
            changes.append((address, "", new_name))
    return changes

def edit_diff(diff):

    lines = ida_kernwin.ask_text(
        0,
        diff,
        "Conflict Editor - remove lines that you do not want imported (incoming on left, current is comment)",
    )

    if lines is not None:
        for line in lines.splitlines():
            parts = line.replace(" // ", " , ").split(",")
            hex_addr = parts[0].strip()
            symbol_name = parts[1].strip()
            old_symbol_name = parts[2].strip()
            print(f'Changing "{old_symbol_name}" to "{symbol_name}"')
            update_symbol_name(int(hex_addr, 16), symbol_name)
    else:
        print("Diff canceled")


def import_symbols():
    current_csv = ida_kernwin.ask_file(False, "symbols_current.txt", "Select exported symbols file")
    new_csv = ida_kernwin.ask_file(False, "symbols_incoming.txt", "Import incoming symbols")

    #if csv_file_path:
    #    import_symbols_from_csv(csv_file_path)
    #    print("Symbols imported.")

    changes = find_changes(current_csv, new_csv)
    changes_txt = ""
    for address, old_name, new_name in changes:
        hex_addr = format(address, 'X').zfill(8).upper();
        changes_txt += f'{hex_addr}, {new_name} // {old_name}\n'
    
    edit_diff(changes_txt)

import_symbols()